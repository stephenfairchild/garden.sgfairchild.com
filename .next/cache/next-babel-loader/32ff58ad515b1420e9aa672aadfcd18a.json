{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"post\\\" && categories[].slug == $category]{\\n      title,\\n      slug,\\n  }\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"category\\\"]{\\n        title,\\n        description,\\n        slug,\\n      }\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"post\\\" && slug.current == $slug][0]{\\n      title,\\n      \\\"name\\\": author->name,\\n      \\\"categories\\\": categories[]->title,\\n      \\\"authorImage\\\": author->image,\\n      publishedAt,\\n      body\\n    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport groq from \"groq\";\nimport client from \"./sanity-client\";\nexport default function getPostBySlug(_x) {\n  return _getPostBySlug.apply(this, arguments);\n}\n\nfunction _getPostBySlug() {\n  _getPostBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(slug) {\n    var query;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = groq(_templateObject());\n            return _context.abrupt(\"return\", client.fetch(query, {\n              slug: slug\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPostBySlug.apply(this, arguments);\n}\n\nexport function getAllCategories() {\n  return _getAllCategories.apply(this, arguments);\n}\n\nfunction _getAllCategories() {\n  _getAllCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var query;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            query = groq(_templateObject2());\n            return _context2.abrupt(\"return\", client.fetch(query, {}));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAllCategories.apply(this, arguments);\n}\n\nexport function getAllPostsInCategory(_x2) {\n  return _getAllPostsInCategory.apply(this, arguments);\n}\n\nfunction _getAllPostsInCategory() {\n  _getAllPostsInCategory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(category) {\n    var query;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            query = groq(_templateObject3());\n            return _context3.abrupt(\"return\", client.fetch(query, {\n              category: category\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getAllPostsInCategory.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/stephen/Apps/next-portfolio/src/content-api.js"],"names":["groq","client","getPostBySlug","slug","query","fetch","getAllCategories","getAllPostsInCategory","category"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,wBAA8BC,aAA9B;AAAA;AAAA;;;4EAAe,iBAA6BC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,KADK,GACGJ,IADH;AAAA,6CAUJC,MAAM,CAACI,KAAP,CAAaD,KAAb,EAAoB;AAAED,cAAAA,IAAI,EAAJA;AAAF,aAApB,CAVI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaf,gBAAsBG,gBAAtB;AAAA;AAAA;;;+EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACGF,YAAAA,KADH,GACWJ,IADX;AAAA,8CAOIC,MAAM,CAACI,KAAP,CAAaD,KAAb,EAAoB,EAApB,CAPJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsBG,qBAAtB;AAAA;AAAA;;;oFAAO,kBAAqCC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGJ,YAAAA,KADH,GACWJ,IADX;AAAA,8CAMIC,MAAM,CAACI,KAAP,CAAaD,KAAb,EAAoB;AAAEI,cAAAA,QAAQ,EAARA;AAAF,aAApB,CANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import groq from \"groq\";\nimport client from \"./sanity-client\";\n\nexport default async function getPostBySlug(slug) {\n    const query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n      title,\n      \"name\": author->name,\n      \"categories\": categories[]->title,\n      \"authorImage\": author->image,\n      publishedAt,\n      body\n    }`;\n\n    return client.fetch(query, { slug });\n}\n\nexport async function getAllCategories() {\n    const query = groq`*[_type == \"category\"]{\n        title,\n        description,\n        slug,\n      }`;\n\n    return client.fetch(query, {});\n}\n\nexport async function getAllPostsInCategory(category) {\n    const query = groq`*[_type == \"post\" && categories[].slug == $category]{\n      title,\n      slug,\n  }`;\n\n    return client.fetch(query, { category });\n}\n"]},"metadata":{},"sourceType":"module"}