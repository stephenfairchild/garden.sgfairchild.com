{
  "ast": null,
  "code": "var _jsxFileName = \"/home/stephen/Apps/next-portfolio/src/pages/posts/[slug].jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport groq from \"groq\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport client from \"../../client\";\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Post = props => {\n  const {\n    title = \"Missing title\",\n    name = \"Missing name\",\n    categories,\n    authorImage,\n    body = []\n  } = props;\n  return __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, title), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, \"By \", name), categories && __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, \"Posted in\", categories.map(category => __jsx(\"li\", {\n    key: category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 25\n    }\n  }, category))), authorImage && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, __jsx(\"img\", {\n    src: urlFor(authorImage).width(50).url(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  })), __jsx(BlockContent, _extends({\n    blocks: body,\n    imageOptions: {\n      w: 320,\n      h: 240,\n      fit: \"max\"\n    }\n  }, client.config(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  })));\n};\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  \"name\": author->name,\n  \"categories\": categories[]->title,\n  \"authorImage\": author->image,\n  body\n}`;\n\nPost.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const {\n    slug = \"\"\n  } = context.query;\n  return await client.fetch(query, {\n    slug\n  });\n};\n\nexport default Post;",
  "map": {
    "version": 3,
    "sources": ["/home/stephen/Apps/next-portfolio/src/pages/posts/[slug].jsx"],
    "names": [
      "groq",
      "imageUrlBuilder",
      "BlockContent",
      "client",
      "urlFor",
      "source",
      "image",
      "Post",
      "props",
      "title",
      "name",
      "categories",
      "authorImage",
      "body",
      "map",
      "category",
      "width",
      "url",
      "w",
      "h",
      "fit",
      "config",
      "query",
      "getInitialProps",
      "context",
      "slug",
      "fetch"
    ],
    "mappings": ";;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACpB,SAAOJ,eAAe,CAACE,MAAD,CAAf,CAAwBG,KAAxB,CAA8BD,MAA9B,CAAP;AACH;;AAED,MAAME,IAAI,GAAGC,KAAK,IAAI;AAClB,QAAM;AACFC,IAAAA,KAAK,GAAG,eADN;AAEFC,IAAAA,IAAI,GAAG,cAFL;AAGFC,IAAAA,UAHE;AAIFC,IAAAA,WAJE;AAKFC,IAAAA,IAAI,GAAG;AALL,MAMFL,KANJ;AAOA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,KAAL,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAUC,IAAV,CAFJ,EAGKC,UAAU,IACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEKA,UAAU,CAACG,GAAX,CAAeC,QAAQ,IACpB;AAAI,IAAA,GAAG,EAAEA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBA,QAApB,CADH,CAFL,CAJR,EAWKH,WAAW,IACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAER,MAAM,CAACQ,WAAD,CAAN,CAAoBI,KAApB,CAA0B,EAA1B,EAA8BC,GAA9B,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAZR,EAgBI,MAAC,YAAD;AACI,IAAA,MAAM,EAAEJ,IADZ;AAEI,IAAA,YAAY,EAAE;AAAEK,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAE;AAAvB;AAFlB,KAGQjB,MAAM,CAACkB,MAAP,EAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhBJ,CADJ;AAwBH,CAhCD;;AAkCA,MAAMC,KAAK,GAAGtB,IAAK;;;;;;EAAnB;;AAQAO,IAAI,CAACgB,eAAL,GAAuB,gBAAgBC,OAAhB,EAAyB;AAC5C;AACA,QAAM;AAAEC,IAAAA,IAAI,GAAG;AAAT,MAAgBD,OAAO,CAACF,KAA9B;AACA,SAAO,MAAMnB,MAAM,CAACuB,KAAP,CAAaJ,KAAb,EAAoB;AAAEG,IAAAA;AAAF,GAApB,CAAb;AACH,CAJD;;AAMA,eAAelB,IAAf",
    "sourcesContent": [
      "import groq from \"groq\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport client from \"../../client\";\n\nfunction urlFor(source) {\n    return imageUrlBuilder(client).image(source);\n}\n\nconst Post = props => {\n    const {\n        title = \"Missing title\",\n        name = \"Missing name\",\n        categories,\n        authorImage,\n        body = []\n    } = props;\n    return (\n        <article>\n            <h1>{title}</h1>\n            <span>By {name}</span>\n            {categories && (\n                <ul>\n                    Posted in\n                    {categories.map(category => (\n                        <li key={category}>{category}</li>\n                    ))}\n                </ul>\n            )}\n            {authorImage && (\n                <div>\n                    <img src={urlFor(authorImage).width(50).url()} />\n                </div>\n            )}\n            <BlockContent\n                blocks={body}\n                imageOptions={{ w: 320, h: 240, fit: \"max\" }}\n                {...client.config()}\n            />\n        </article>\n    );\n};\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  \"name\": author->name,\n  \"categories\": categories[]->title,\n  \"authorImage\": author->image,\n  body\n}`;\n\nPost.getInitialProps = async function (context) {\n    // It's important to default the slug so that it doesn't return \"undefined\"\n    const { slug = \"\" } = context.query;\n    return await client.fetch(query, { slug });\n};\n\nexport default Post;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
